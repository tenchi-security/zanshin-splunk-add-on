{"basic_builder": {"appname": "TA-zanshin-add-on-for-splunk", "friendly_name": "Zanshin Add-on for Splunk", "version": "1.0.0", "author": "Tenchi Security", "description": "", "theme": "#ffde63", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABA9JREFUWEfNlm1sU1UYx59zbjcKpd2d2yrD+EIGZChTwMAHiNmGritD21UNwnSiBIOSdYoLYRA7bjZekqkDOrIKiAkvQ+LUdoxkWxsTRoJfBCEBjG/LRBIYE3XtNm/X9N5Dbs0W2vvS23Vj67fe8zzP/3f/5z7POQim2A9NMR6YekCrq/vTU3V4LyGTC4cQEA1HdkQcKq31n0AIvTG524e+cjv0r0WALMzQbIrifgYA/SRBDYeBX9DmoHtGvyFbbaAaEOydDCBCoN5TY9gmaI8CrbKTaVrjwHUAyHnAUH2alPD8luqH/FFAwh/broAVCHjkgFI0AHOzKdW8PXc4CIaUwwmgzR6H3jUSJWp7W52/EwCZpMo8TCNwVcxUDbT16BB03+YV4tH1f7mLi84xhWFZICsz8CRFkSsEICW20ngDEZ6UeHamtd+vIzkYbXUD+wHI+1KvRuHop64KHWQaMARDBMo/GYxa5JTMAeR1O/TFsRqSQKUMoQEP/IYQZMbbn0N2HWSlYWBDBF6vjwZSyOWAQ4vcjP6aKiAhyFrXvwkD/mwigAiCw56PDJukasueZQxD8BVq8CICslgJagwOBUCL5rm36vsSAoq4tCfwHOahCxTOuUSBCPA7PA5adgDHPe1LNh5p49neF+VcOnbADsaMNGCDIXh5Y73iDqPUdP9M2prdsu9RVi4wLpB53e6nub8vXCZ8KKa//i/Z3NwMRqMRWJYFi8WiCEQZ5m3p/Na1XykoLpCQXGzd4OKG/nxXqlBDQwPk5eXFBcKp6d3eZU/NB4ZRHgbxukhYL3hrH53S23WDhAcNsfG5ubngdDohGAwqOoTTnrF5v/lU9liSndRygMWvbK7g/L82Sq1XVVVBfn6+LBDSGrt8Z08VqHl5VVs2UqioZM1VEvpnYWxhmqahqakJysrKxJpIQ3DW8qXeUzWXxh3ItK56JX/3x++AiD8Ds9kMHR0dIk0845Hj3jPH1quBEWISckhIML1U7ubZ26WikS9cigmJeow0M4LTZxflnPnCfmvigMo/nsP3nf8FOFZ0GxBB6ubU+lqP7FQLMyaHIi6VvrOHH+zZrjhPUg13NDkFj7c3Vg5PONAqu3Ma133+Dz7UP0tOjKIXrO/8uvF4IjBjdiji0quVa/n+n76UEkTazMu+s6eXJAqTFJCQXLR67QUyfHd59JeMQZOxrLDj9K5zDxzIVFb7LP/X9z8ACY92K56e3eptOyHqQrVwCbd9bGGT5e2j/H83N0TsprQczlqR23ly++9qAUSdOdbEkbzn3zyYgft8N0h4SId1Tzi9rZ9L3sXV6iTtkCBktr33Icf21mgyCh9rb64MqBWXbIhkkkdzCUGmNR+84G054Eu23rg4lCzE/flTDugeYcNeDKwTMdgAAAAASUVORK5CYII=", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "zanshin:alerts", "interval": "3600", "use_external_validation": true, "streaming_mode_xml": true, "name": "zanshin_alerts", "title": "Zanshin Alerts", "description": "", "type": "customized", "parameters": [{"name": "api_key", "label": "API key", "help_string": "Use Zanshin Portal to create a API key and enter it here.", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": ""}, {"name": "organization_id", "label": "Organization ID", "help_string": "Organization ID (UUID) of the organization that will get the alerts", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "a72f4225-43e9-4922-b6b7-8b0620bdb1c0"}, {"name": "scan_target_ids", "label": "Scan Target IDs", "help_string": "Optional comma-separated list of Scan Target IDs (UUID). Leave blank to get alerts from all Scan Targets accessible using the API key and Organization ID provided", "required": false, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "api_key", "title": "API key", "description": "Use Zanshin Portal to create a API key and enter it here.", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "organization_id", "title": "Organization ID", "description": "Organization ID (UUID) of the organization that will get the alerts", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "scan_target_ids", "title": "Scan Target IDs", "description": "Optional comma-separated list of Scan Target IDs (UUID). Leave blank to get alerts from all Scan Targets accessible using the API key and Organization ID provided", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport json\nfrom datetime import datetime, timedelta\n\nfrom zanshinsdk import Client\n\nPORTAL_DOMAIN = \"https://zanshin.tenchisecurity.com\"\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # api_key = definition.parameters.get('api_key', None)\n    # organization_id = definition.parameters.get('organization_id', None)\n    pass\n\ndef collect_events(helper, ew):\n    helper.log_info(\"Collect_events Zanshin Alerts start!!!\")\n\n    opt_name = helper.get_arg(\"name\")\n    opt_api_key = helper.get_arg(\"api_key\")\n    opt_organization_id = helper.get_arg(\"organization_id\")\n    opt_scan_target_ids = helper.get_arg(\"scan_target_ids\")\n\n    if not opt_api_key:\n        raise ValueError(\"\")\n\n    if not opt_organization_id:\n        raise ValueError(\"\")\n\n    if not opt_scan_target_ids:\n        opt_scan_target_ids = []\n    else:\n        opt_scan_target_ids = [x.strip() for x in opt_scan_target_ids.split(',')]\n\n    _client = Client(api_key=opt_api_key)\n\n    organization = _client.get_organization(opt_organization_id)\n    scanTargets = _client.iter_organization_scan_targets(opt_organization_id)\n    \n    start_date = None\n    \n    helper.log_info(\"get check point\")\n    latest_date = helper.get_check_point('%s:%s:last_date' % (opt_name, opt_organization_id))\n    \n    if latest_date:\n        start_date = latest_date\n\n    for alert in _client.iter_alerts(opt_organization_id, opt_scan_target_ids, start_date=start_date, historical=True):\n        try:\n            scanTargetName = 'undefined'\n            for scanTarget in scanTargets:\n                if scanTarget['id'] == alert['scanTargetId']:\n                    scanTargetName = scanTarget['name']\n                    break\n\n            _alert = {\n                \"alert_id\": alert['id'],\n                \"alert_version\": alert['version'],\n                \"organization_name\": organization['name'],\n                \"scan_target_name\": scanTargetName,\n                \"resource\": alert['resource'],\n                \"rule\": alert['rule'],\n                \"severity\": alert['severity'],\n                \"tags\": alert['tags'],\n                \"compliances\": alert['compliances'],\n                \"labels\": alert['labels'],\n                \"metadata\": alert['metadata'],\n                \"enrichment\": alert['enrichment'],\n                \"state\": alert['state'],\n                \"date\": alert['date'],\n                \"alert_pure\": alert['rulePure'],\n                \"organization_id\": alert['organizationId'],\n                \"scan_target_id\": alert['scanTargetId'],\n                \"permalink\": f\"{PORTAL_DOMAIN}/alert/{alert['id']}\",\n            }\n\n            utc_dt = datetime.strptime(alert['date'], '%Y-%m-%dT%H:%M:%S.%fZ')\n            utc_dt = utc_dt + timedelta(milliseconds=1)\n\n            event = helper.new_event(time=(utc_dt - datetime(1970, 1, 1)).total_seconds(),\n                                    source=helper.get_input_type(),\n                                    index=helper.get_output_index(),\n                                    sourcetype=helper.get_sourcetype(),\n                                    data=json.dumps(_alert))\n\n            ew.write_event(event)\n            helper.log_info(f\"Wrote alert {alert['id']}\")\n\n            current_date = helper.get_check_point('%s:%s:last_date' % (opt_name, opt_organization_id))\n\n            if current_date:\n                cp_utc_dt = datetime.strptime(current_date, '%Y-%m-%dT%H:%M:%S.%fZ')\n                if (utc_dt >= cp_utc_dt):\n                    helper.save_check_point('%s:%s:last_date' % (opt_name, opt_organization_id), utc_dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))\n                    helper.log_info(\"saving check point\")\n            else:\n                helper.save_check_point('%s:%s:last_date' % (opt_name, opt_organization_id), utc_dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))\n                helper.log_info(\"saving check point\")\n\n        except Exception as e:\n            helper.log_error(f\"Error writing alert {alert['id']}\")\n            raise e\n    helper.log_info(f\"Collect events finished for organization {organization['id']}\")\n", "customized_options": [{"name": "organization_id", "value": "a72f4225-43e9-4922-b6b7-8b0620bdb1c0"}, {"name": "scan_target_ids", "value": ""}], "uuid": "7112518b8b554547b21dd99a15f95e6e", "sample_count": "282"}, {"index": "default", "sourcetype": "zanshin:following:alerts", "interval": "3600", "use_external_validation": true, "streaming_mode_xml": true, "name": "zanshin_following_alerts", "title": "Zanshin Following Alerts", "description": "", "type": "customized", "parameters": [{"name": "api_key", "label": "API Key", "help_string": "Use Zanshin Portal to create a API key and enter it here.", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": ""}, {"name": "organization_id", "label": "Organization Id", "help_string": "Organization ID (UUID) of the organization that will get the alerts", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "a72f4225-43e9-4922-b6b7-8b0620bdb1c0"}, {"name": "following_ids", "label": "Following IDs", "help_string": "Optional comma-separated list of Following IDs (UUID). Leave blank to get alerts from all Following accessible using the API key and Organization ID provided", "required": false, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "api_key", "title": "API Key", "description": "Use Zanshin Portal to create a API key and enter it here.", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "organization_id", "title": "Organization Id", "description": "Organization ID (UUID) of the organization that will get the alerts", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "following_ids", "title": "Following IDs", "description": "Optional comma-separated list of Following IDs (UUID). Leave blank to get alerts from all Following accessible using the API key and Organization ID provided", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport json\nfrom datetime import datetime, timedelta\n\nfrom zanshinsdk import Client\n\nPORTAL_DOMAIN = \"https://zanshin.tenchisecurity.com\"\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # api_key = definition.parameters.get('api_key', None)\n    # organization_id = definition.parameters.get('organization_id', None)\n    pass\n\ndef collect_events(helper, ew):\n    helper.log_info(\"Collect_events Zanshin Following Alerts start!!!\")\n\n    opt_name = helper.get_arg(\"name\")\n    opt_api_key = helper.get_arg(\"api_key\")\n    opt_organization_id = helper.get_arg(\"organization_id\")\n    opt_following_ids = helper.get_arg(\"following_ids\")\n\n    if not opt_api_key:\n        raise ValueError(\"\")\n\n    if not opt_organization_id:\n        raise ValueError(\"\")\n\n    if not opt_following_ids:\n        opt_following_ids = []\n    else:\n        opt_following_ids = [x.strip() for x in opt_following_ids.split(',')]\n\n    _client = Client(api_key=opt_api_key)\n\n    following = _client.iter_organization_following(opt_organization_id)\n    \n    start_date = None\n    \n    helper.log_info(\"get check point\")\n    latest_date = helper.get_check_point('%s:%s:following:last_date' % (opt_name, opt_organization_id))\n    \n    if latest_date:\n        start_date = latest_date\n\n\n    for alert in _client.iter_following_alerts(opt_organization_id, opt_following_ids, start_date=start_date, historical=True):\n        try:\n            followingName = 'undefined'\n            for f in following:\n                if f['id'] == alert['followingId']:\n                    followingName = f['name']\n                    break\n\n            _alert = {\n                \"alert_id\": alert['id'],\n                \"alert_version\": alert['version'],\n                \"following_name\": followingName,\n                \"resource\": alert['resource'],\n                \"rule\": alert['rule'],\n                \"severity\": alert['severity'],\n                \"tags\": alert['tags'],\n                \"compliances\": alert['compliances'],\n                \"labels\": alert['labels'],\n                \"metadata\": alert['metadata'],\n                \"enrichment\": alert['enrichment'],\n                \"state\": alert['state'],\n                \"date\": alert['date'],\n                \"alert_pure\": alert['rulePure'],\n                \"following_id\": alert['followingId'],\n                \"permalink\": f\"{PORTAL_DOMAIN}/alert/{alert['id']}\",\n            }\n\n            utc_dt = datetime.strptime(alert['date'], '%Y-%m-%dT%H:%M:%S.%fZ')\n            utc_dt = utc_dt + timedelta(milliseconds=1)\n\n            event = helper.new_event(time=(utc_dt - datetime(1970, 1, 1)).total_seconds(),\n                                    source=helper.get_input_type(),\n                                    index=helper.get_output_index(),\n                                    sourcetype=helper.get_sourcetype(),\n                                    data=json.dumps(_alert))\n\n            ew.write_event(event)\n            helper.log_info(f\"Wrote alert {alert['id']}\")\n\n            current_date = helper.get_check_point('%s:%s:following:last_date' % (opt_name, opt_organization_id))\n\n            if current_date:\n                cp_utc_dt = datetime.strptime(current_date, '%Y-%m-%dT%H:%M:%S.%fZ')\n                if (utc_dt >= cp_utc_dt):\n                    helper.save_check_point('%s:%s:following:last_date' % (opt_name, opt_organization_id), utc_dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))\n                    helper.log_info(\"saving check point\")\n            else:\n                helper.save_check_point('%s:%s:following:last_date' % (opt_name, opt_organization_id), utc_dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))\n                helper.log_info(\"saving check point\")\n\n        except Exception as e:\n            helper.log_error(f\"Error writing alert {alert['id']}\")\n            raise e\n    helper.log_info(f\"Collect events finished for organization {opt_organization_id}\")\n", "customized_options": [{"name": "organization_id", "value": "a72f4225-43e9-4922-b6b7-8b0620bdb1c0"}, {"name": "following_ids", "value": ""}], "uuid": "e0a91890fcc145468ad7ecbc1fba6ae0", "sample_count": "62856"}]}, "field_extraction_builder": {"zanshin:following:alerts": {"is_parsed": true, "data_format": "json"}, "zanshin:alerts": {"is_parsed": true, "data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {}}}, "sourcetype_builder": {"zanshin:alerts": {"metadata": {"event_count": 0, "data_input_name": "zanshin_alerts", "extractions_count": 0, "cims_count": 0}}, "zanshin:following:alerts": {"metadata": {"event_count": 0, "data_input_name": "zanshin_following_alerts", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1634247904_9", "progress": 1.0}}